class(tmp)
?shiny.tag
??shiny.tag
?tags
tmp = HTML(radioButtons(inputId = tp, label = tp, choices = c('pos', 'neg', 'neutral'), selected = 'neutral', inline = T))
tmp
class(tmp)
?div
for(i in 1:length(toPlot)){
tp = toPlot[i]
toPlot[i] = HTML(radioButtons(inputId = tp, label = tp, choices = c('pos', 'neg', 'neutral'), selected = 'neutral', inline = T))
}
toPlot
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
tmp = tags$body(HTML(paste(toPlot, sep = '\n')))
tmp
radioButtons(inputId = tp, label = tp, choices = c('pos', 'neg', 'neutral'), selected = 'neutral', inline = T)
column(radioButtons(inputId = tp, label = tp, choices = c('pos', 'neg', 'neutral'), selected = 'neutral', inline = T))
column(width = 12, radioButtons(inputId = tp, label = tp, choices = c('pos', 'neg', 'neutral'), selected = 'neutral', inline = T))
a = column(width = 12, radioButtons(inputId = tp, label = tp, choices = c('pos', 'neg', 'neutral'), selected = 'neutral', inline = T))
class(a)
tmp = shiny.tag((paste(toPlot, sep = '\n')))
tags$col(toPlot)
toPlot
shiny::runApp()
tags$col(toPlot)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
toPlot
toPlot = colnames(markData)[1:3]
print(toPlot)
tbody = ""
for(i in 1:length(toPlot)){
tp = toPlot[i]
entry = (radioButtons(inputId = tp, label = tp, choices = c('pos', 'neg', 'neutral'), selected = 'neutral', inline = T))
tbody = paste(tbody, entry)
}
tobody
tbody
HTML(tbody)
shiny::runApp()
HTML(tbody)
column(width = 12, HTML(tbody))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
character()
class(character(0))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
head(src_k4marks)
load('data/promoter_marks_FE.save')
head(markData)
load('data/mycounts_K4paper.save')
load('ref/dictionaries.save')
laod('data//perc75_perc98_membership.save')
load('data//perc75_perc98_membership.save')
head(pass75)
paste('perc75', colnames(pass75))
colnames(pass75) = paste('perc75', colnames(pass75))
colnames(pass98) = paste('perc98', colnames(pass98))
percData = cbind(pass75, pass98)
head(percData)
pname2pkey = c('perc75', 'perc98')
names(pname2pkey) = c('75th Percentile', '98th Percentile')
load('data//perc75_perc98_membership.save')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
cnames = colnames(percData)
tmp = strsplit(cnames, '[_ ]')
tmp
tmp = matrix(unlist(tmp), nrow = length(tmp[[1]]))
tmp
grpNames = unique(tmp[1,])
grpNames
apply(tmp[2:nrow(tmp),],2, paste)
apply(tmp[2:nrow(tmp),],2, function(x)return(paste(x)))
apply(tmp[2:nrow(tmp),],2, function(x)return(paste(x, collapse = ' ')))
grpNames = unique(tmp[1,])
content = apply(tmp[2:nrow(tmp),],2, function(x)return(paste(x, collapse = ' ')))
grpNames = tmp[1,]
uniq = unique(grpNames)
grpNames
uniq
content = apply(tmp[2:nrow(tmp),],2, function(x)return(paste(x, collapse = ' ')))
out = list()
for(un in uniq){
keep = grpNames == un
out[[length(out) + 1]] = content[keep]
names(out)[length(out)] = un
}
out
split_groups = function(cnames){
#splits input names (likely colnames) by "_" and " "
#input names must have same number of elements when split
#first element defines group
#remaining elements should be unique within group
#returns list of character arrays
#names of list items are group names and array contents are individual names
tmp = strsplit(cnames, '[_ ]')
tmp = matrix(unlist(tmp), nrow = length(tmp[[1]]))
grpNames = tmp[1,]
uniq = unique(grpNames)
content = apply(tmp[2:nrow(tmp),],2, function(x)return(paste(x, collapse = ' ')))
out = list()
for(un in uniq){
keep = grpNames == un
out[[length(out) + 1]] = content[keep]
names(out)[length(out)] = un
}
return(out)
}
split_groups(colnames(markData_4me3_4ac))
split_groups(colnames(pass75))
split_groups = function(cnames){
#splits input names (likely colnames) by "_" and " "
#input names must have same number of elements when split
#first element defines group
#remaining elements should be unique within group
#returns list of character arrays
#names of list items are group names and array contents are individual names
tmp = strsplit(cnames, '[_ ]')
tmp = matrix(unlist(tmp), nrow = length(tmp[[1]]))
grpNames = tmp[1,, drop = F]
uniq = unique(grpNames)
content = apply(tmp[2:nrow(tmp),, drop = F],2, function(x)return(paste(x, collapse = ' ')))
out = list()
for(un in uniq){
keep = grpNames == un
out[[length(out) + 1]] = content[keep]
names(out)[length(out)] = un
}
return(out)
}
split_groups(colnames(pass75))
colnames(pass75)
tmp = split_groups(colnames(pass75))
tmp
length(tmp)
cnames = (colnames(pass75))
tmp = strsplit(cnames, '[_ ]')
tmp = matrix(unlist(tmp), nrow = length(tmp[[1]]))
grpNames = tmp[1,, drop = F]
uniq = unique(grpNames)
content = apply(tmp[2:nrow(tmp),, drop = F],2, function(x)return(paste(x, collapse = ' ')))
out = list()
content
uniq
grpNames
unique(grpNames)
grpNames = tmp[1,]
unique(grpNames)
grpNames = tmp[1,, drop = F]
uniq = unique(grpNames[1,])
uniq
split_groups = function(cnames){
#splits input names (likely colnames) by "_" and " "
#input names must have same number of elements when split
#first element defines group
#remaining elements should be unique within group
#returns list of character arrays
#names of list items are group names and array contents are individual names
tmp = strsplit(cnames, '[_ ]')
tmp = matrix(unlist(tmp), nrow = length(tmp[[1]]))
grpNames = tmp[1,, drop = F]
uniq = unique(grpNames[1,])
content = apply(tmp[2:nrow(tmp),, drop = F],2, function(x)return(paste(x, collapse = ' ')))
out = list()
for(un in uniq){
keep = grpNames == un
out[[length(out) + 1]] = content[keep]
names(out)[length(out)] = un
}
return(out)
}
split_groups(colnames(pass75))
split_groups(colnames(pass98))
split_groups(colnames(percData))
split_groups(colnames(markData))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
class(pass75)
class(pass75[1,1])
class(markData[1,1])
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library()
library(RColorBrewer)
shiny::runApp()
RColorBrewer::display.brewer.all()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shinyapp)
library(shinyapps)
deployapp()
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
deployApp()
shiny::runApp()
shiny::runApp()
deployApp()
shiny::runApp()
shinyapps
library(shinyapps)
deployApp
deployApp()
shiny::runApp()
setwd('..')
setwd('APP_gsea/')
setwd('..')
setwd('APP_venns/')
shiny::runApp('C:/Users/jrboyd/Desktop/Shiny Apps/APP_gsea')
shiny::runApp()
tmp = read.table('data//uniquely_H3K4_2FE_JB03182015.csv')
dim(tmp)
head(tmp)
tmp = read.table('data//uniquely_H3K4_2FE_JB03182015.csv', sep = '\t')
dim(tmp)
r = 1
str = tmp[r,]
str = strsplit(str, ',')
tmp = read.table('data//uniquely_H3K4_2FE_JB03182015.csv', sep = '\t', stringsAsFactors = F)
for(r in 1:nrow(tmp)){
str = tmp[r,]
str = strsplit(str, ',')
head(str)
str = strsplit(str, ',')[[1]]
str = tmp[r,]
str = strsplit(str, ',')[[1]]
name = str[1]
name
members = str[2:length(str)]
keep = members != ''
all_members = character()
all_members = union(all_members, members)
length(all_members)
length(members)
tmp = read.table('data//uniquely_H3K4_2FE_JB03182015.csv', sep = '\t', stringsAsFactors = F)
all_members = character()
all_lists = list()
for(r in 1:nrow(tmp)){
str = tmp[r,]
str = strsplit(str, ',')[[1]]
name = str[1]
members = str[2:length(str)]
keep = members != ''
members = members[keep]
all_members = union(all_members, members)
all_lists[[length(all_lists) + 1]] = members
names(all_lists)[length(all_lists)] = name
}
all_lists
membershipTable = matrix(data = F, nrow = length(all_members), ncol = 0)
dim(membershipTable)
membershipTable = matrix(data = F, nrow = length(all_members), ncol = length(all_lists))
for(i in 1:length(all_lists))
for(i in 1:length(all_lists)){
m = all_lists[[i]]
membershipTable[m, i] = T
}
rownames(membershipTable) = all_members
colnames(membershipTable) = names(all_lists)
for(i in 1:length(all_lists)){
m = all_lists[[i]]
membershipTable[m, i] = T
}
head(membershipTable)
save(membershipTable, file = 'uniquely_H3K4.save')
load('data/uniquely_H3K4.save')
uniquely_K4_membership = membershipTable
save(uniquely_K4_membership, file = 'uniquely_H3K4.save')
shiny::runApp()
shiny::runApp()
plotVenn = function(vennTable, plotType, labels_on_venn){
final = vennTable
if(plotType == plainNumeric){
if(labels_on_venn){
vennDiagram(final)
}
else{
colors = RColorBrewer::brewer.pal(ncol(final), name = 'Dark2')
vennDiagram(final, names = '', circle.col = colors)
legend(x = 'topleft', legend = colnames(final), fill = colors)
}
}
else{
ve = venneuler(final)
colors = hsv(ve$colors, s = .2)
if(labels_on_venn){
plot(ve)
}
else{
ve$labels = rep('', length(ve$labels))
plot(ve)
legend(x = 'topleft', legend = colnames(final), fill = colors)
}
}
}
plotVenn(uniquely_K4_membership[,1:2], plainNumeric, T)
plotVenn(uniquely_K4_membership[,1:2], plainNumeric, F)
plotVenn(uniquely_K4_membership[,c(1,4)], plainNumeric, F)
for(i in 1:3)plotVenn(uniquely_K4_membership[,c(i,i+3)], plainNumeric, F)
getwd()
source('setup.R')
for(i in 1:3)plotVenn(uniquely_K4_membership[,c(i,i+3)], plainNumeric, F)
pdf('unique_comparisons.pdf')
for(i in 1:3)
plotVenn(uniquely_K4_membership[,c(i,i+3)], plainNumeric, F)
dev.off()
pdf('unique_comparisons.pdf')
layout(matrix(1:3, ncol = 1))
for(i in 1:3)
plotVenn(uniquely_K4_membership[,c(i,i+3)], plainNumeric, F)
dev.off()
pdf('unique_comparisons.pdf')
layout(matrix(1:3, ncol = 1))
for(i in 1:3){
plotVenn(uniquely_K4_membership[,c(i,4)], plainNumeric, F)
plotVenn(uniquely_K4_membership[,c(i,5)], plainNumeric, F)
plotVenn(uniquely_K4_membership[,c(i,6)], plainNumeric, F)
}
for(i in 4:6){
plotVenn(uniquely_K4_membership[,c(1,i)], plainNumeric, F)
plotVenn(uniquely_K4_membership[,c(2,i)], plainNumeric, F)
plotVenn(uniquely_K4_membership[,c(3,i)], plainNumeric, F)
}
dev.off()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::accountInfo()
shinyapps::accountInfo(name = jrboyd)
shinyapps::accountInfo(name = 'jrboyd')
?shinyapps::setAccountInfo()
??shinyapps::setAccountInfo()
?shinyapps::setAccountInfo
removeAccount('jrboyd')
shinyapps::setAccountInfo(name='tmessier',
token='CA1C820E1AED3DC7198762158EBB0376',
secret='vwPuZ/zthJeFK+uHaNdJObYZ6NsLpcOkObs7Fx73')
deployApp()
accountInfo()
accountInfo('messier')
accountInfo('tmessier')
accountInfo('jrboyd')
deployApp()
deployApp(account = 'tmessier')
setwd('..')
setwd('APP_gsea/')
deployApp(account = 'tmessier')
setwd('..')
setwd('APP_most_changed/')
deployApp(account = 'tmessier')
shiny::runApp('C:/Users/jrboyd/Desktop/Shiny Apps/APP_venns')
shiny::runApp('C:/Users/jrboyd/Desktop/Shiny Apps/APP_venns')
getwd()
setwd('..')
setwd('APP_venns/')
deployApp(account = 'tmessier')
shiny::runApp('C:/Users/jrboyd/Desktop/Shiny Apps/APP_gsea')
dl_name = reactive({
fname = input$pair_selector
fname = paste(
fname,
'pval',
input$pval_threshold,
sep = '_'
)
return(fname)
})
dl_listname = reactive({
fname = dl_name()
fname = paste(
fname,
input$list_selector,
sep = '_')
return(fname)
})
dl_regname = reactive({
fname = dl_listname()
fname = paste(
fname,
input$region_selector,
sep = '_')
return(fname)
})
shiny::runApp('C:/Users/jrboyd/Desktop/Shiny Apps/APP_gsea')
shiny::runApp('C:/Users/jrboyd/Desktop/Shiny Apps/APP_gsea')
shiny::runApp('C:/Users/jrboyd/Desktop/Shiny Apps/APP_gsea')
shiny::runApp('C:/Users/jrboyd/Desktop/Shiny Apps/APP_gsea')
shiny::runApp('C:/Users/jrboyd/Desktop/Shiny Apps/APP_gsea')
shiny::runApp('C:/Users/jrboyd/Desktop/Shiny Apps/APP_gsea')
shiny::runApp('C:/Users/jrboyd/Desktop/Shiny Apps/APP_gsea')
shiny::runApp('C:/Users/jrboyd/Desktop/Shiny Apps/APP_gsea')
shiny::runApp('C:/Users/jrboyd/Desktop/Shiny Apps/APP_gsea')
shiny::runApp('C:/Users/jrboyd/Desktop/Shiny Apps/APP_gsea')
library(formatR)
tidy_dir()
getwd()
shiny::runApp()
tidy_dir()
tidy_dir()
setwd('..')
setwd('APP_gsea/')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd('..')
setwd('APP_gsea/')
deployApp()
deployApp(account = 'tmessier')
