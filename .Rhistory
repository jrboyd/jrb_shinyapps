shiny::runApp()
shiny::runApp()
shiny::runApp('APP_most_changed')
shiny::runApp('APP_most_changed')
install.packages('GITHUB')
install.packages('github')
library(github)
install.packages("devtools")
library(devtools)
dev_mode(on=T)
install.packages('Rtools')
markData_4me3_4ac = readRDS('data/markData_4me3_4ac.rds')
ensg2sym = readRDS('data/ensg2sym.rds')
getwd()
setwd('APP_most_changed/')
source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp()
shiny::runApp()
shinyapps::deployApp('c:/Users/jrboyd/Desktop/paper_shinyHeatmaps/APP_most_changed')
source('C:/Users/jrboyd/Desktop/paper_shinyHeatmaps/global.R', echo=TRUE)
shiny::runApp()
source('C:/Users/jrboyd/Desktop/paper_shinyHeatmaps/global.R')
shiny::runApp()
shiny::runApp()
shinyapps::deployApp('c:/Users/jrboyd/Desktop/paper_shinyHeatmaps/APP_most_changed')
shiny::runApp('C:/Users/jrboyd/Desktop/paper_shinyHeatmaps/APP_demo')
install.packages('maps')
shiny::runApp('C:/Users/jrboyd/Desktop/paper_shinyHeatmaps/APP_demo')
install.packages('mapproj')
shiny::runApp('C:/Users/jrboyd/Desktop/paper_shinyHeatmaps/APP_demo')
shinyapps::deployApp('c:/Users/jrboyd/Desktop/paper_shinyHeatmaps/APP_demo')
shinyapps::deployApp('c:/Users/jrboyd/Desktop/paper_shinyHeatmaps/APP_demo')
getwd()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
readRDS('data/markData_4me3_4ac.rds')
markData_4me3_4ac <- readRDS('data/markData_4me3_4ac.rds')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
markData_4me3_4ac <- readRDS("data/markData_4me3_4ac.rds")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
markData_4me3_4ac <- readRDS("data/markData_4me3_4ac.rds")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
markData_4me3_4ac <- readRDS("data/markData_4me3_4ac.rds")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp('c:/Users/jrboyd/Desktop/paper_shinyHeatmaps/APP_most_changed/')
shinyapps::deployApp('c:/Users/jrboyd/Desktop/paper_shinyHeatmaps/APP_most_changed')
shinyapps::deployApp('c:/Users/jrboyd/Desktop/paper_shinyHeatmaps/APP_most_changed')
shiny::runApp()
shinyapps::deployApp('c:/Users/jrboyd/Desktop/paper_shinyHeatmaps/APP_most_changed')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?downloadHandler
shiny::runApp()
shiny::runApp()
shiny::runApp()
tempdir()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp('c:/Users/jrboyd/Desktop/paper_shinyHeatmaps/APP_most_changed')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp('c:/Users/jrboyd/Desktop/paper_shinyHeatmaps/APP_most_changed')
shiny::runApp()
shinyapps::deployApp('c:/Users/jrboyd/Desktop/paper_shinyHeatmaps/APP_most_changed')
shiny::runApp('APP_MDA_siRunx')
shiny::runApp('APP_MDA_siRunx')
tmp
tmp = matrix(1:16, ncol = 2)
tmp = matrix(1:16, ncol = 2)>4
tmp
key = c(T, F)
apply(tmp, 1, function(x)return(all(x == key)))
apply(tmp, 1, function(x)return(x == key))
key
t(apply(tmp, 1, function(x)return(x == key)))
1:2 == 1:2
1:2 == 3:2
key
tmp
key
t(apply(tmp, 1, function(x)return(x == key)))
t(apply(tmp, 2, function(x)return(x == key)))
t(apply(tmp, 1, function(x)return(x == key)))
tmp
key
tmp = matrix(1:16, ncol = 2)>5
tmp
t(apply(tmp, 1, function(x)return(x == key)))
key
tmp
tmp = matrix(1:16, ncol = 2)>11
tmp
key
tmp = matrix(1:16, ncol = 2)<6
tmp
key
t(apply(tmp, 1, function(x)return(x == key)))
t(apply(tmp, 1, function(x)return(all(x == key))))
tmp
key
shiny::runApp('APP_MDA_siRunx')
shiny::runApp('APP_MDA_siRunx')
shiny::runApp('APP_MDA_siRunx')
shiny::runApp('APP_MDA_siRunx')
library(shinyapps)
shinyapps::deployApp()
getwd()
setwd('APP_MDA_siRunx/')
shinyapps::deployApp()
source("http://bioconductor.org/biocLite.R")
biocLite('limma')
detach('limma')
detach('package:limma', unload = T)
biocLite('limma')
shinyapps::deployApp()
shiny::runApp()
shinyapps::deployApp()
biocLite('Rcpp')
shinyapps::deployApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp()
shinyapps::terminateApp()
getwd()
shinyapps::terminateApp('APP_MDA_siRunx')
shinyapps::deployApp()
shinyapps::deployApp()
setwd('APP_MDA_siRunx/')
shinyapps::deployApp()
library()
install.packages("Rcpp")
shinyapps::deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?downloadHandler
shiny::runApp()
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp()
tmp = c('p', 'fc', 'max')
paste('DMASMDAS', tmp)
shiny::runApp()
i = 1
(3+3*(1-i)):(5+3*(1-i))
i = 2
(3+3*(1-i)):(5+3*(1-i))
(3+3*(i - 1)):(5+3*(i - 1))
shiny::runApp()
shiny::runApp()
type2groups
unique(type2groups)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
a = 'asdf'
strsplit(a, 'q')
strsplit(a, 'q')[[1]]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp()
setwd('APP_MDA_siRunx/')
shinyapps::deployApp()
head(padj)
range(padj)
range(fc)
head(fc)
shiny::runApp('APP_gsea')
shiny::runApp('APP_gsea')
shiny::runApp('APP_gsea')
shiny::runApp('APP_gsea')
shiny::runApp('APP_gsea')
shiny::runApp('APP_gsea')
shiny::runApp('APP_gsea')
library('shinyapps')
shinyapps::deployApp()
setwd('APP_gsea/')
shinyapps::deployApp()
src_k4marks = 'Breast K4 detection'
src_perc75 = 'Breast K4 percentiles'
shiny::runApp('C:/Users/jrboyd/Desktop/Shiny Apps/APP_venns')
shiny::runApp('C:/Users/jrboyd/Desktop/Shiny Apps/APP_venns')
shiny::runApp('C:/Users/jrboyd/Desktop/Shiny Apps/APP_venns')
shiny::runApp('C:/Users/jrboyd/Desktop/Shiny Apps/APP_venns')
shiny::runApp('C:/Users/jrboyd/Desktop/Shiny Apps/APP_venns')
shiny::runApp('C:/Users/jrboyd/Desktop/Shiny Apps/APP_venns')
shiny::runApp('C:/Users/jrboyd/Desktop/Shiny Apps/APP_venns')
shiny::runApp('C:/Users/jrboyd/Desktop/Shiny Apps/APP_venns')
setwd('..')
setwd('APP_gsea/')
shiny::runApp()
shiny::runApp()
dim(data)
dimnames(data)
p_name = 'From MCF10A H3K4AC to MCF7 H3K4AC'
l-name = 'PEDERSEN_METASTASIS_BY_ERBB2_ISOFORM_3'
l_name = 'PEDERSEN_METASTASIS_BY_ERBB2_ISOFORM_3'
dat = data[,p_name,l_name]
dat = data[,p_name,l_name,]
dat
dat[,1]
threshold = .6
dat = data[,p_name,l_name,]
keep = dat[,1] > threshold #must pass pvalue threshold
dat = dat[keep,, drop = F]
keep = dat[,2] > dat[,3] #must be enriched, not depleted
dat = dat[keep,, drop = F]
dat
start = pair2starts[p_name]
end = pair2ends[p_name]
start
end
rownames(dat)
sub('start', start,  rownames(dat))
rownames(dat) = sub('start', start,  rownames(dat))
rownames(dat) = sub('end', end,  rownames(dat))
dat
rownames(dat) = gsub('start', start,  rownames(dat))
rownames(dat) = gsub('end', end,  rownames(dat))
dat
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
dat = data[,p_name,l_name,, drop = F]
dat
keep = dat[,1] > threshold #must pass pvalue threshold
dat = dat[keep,, drop = F]
dim(dat)
dat = data[1:6,,,1:3]
dat
dim(dat)
dat = data[,p_name,l_name,, drop = F]
dat = dat[1:6,,,1:3]
dat
shiny::runApp()
shiny::runApp()
shiny::runApp()
rects.get = function(vertLines = log2(c(1/2, 2)), horLines = 1, XMIN = -10, XMAX = 10,
YMIN = 0, YMAX = 6) {
# with no args, returns a predefined set of rectangles regions in x are from XMIN to XMAX split by vertLines
# regions in y are from YMIN to YMAX split by horLines XMIN = -4 XMAX = 4 YMIN = 0 YMAX = 6 vertLines =
# c(1/4, 1/2.5, 1/1.5, 1.5, 2.5,4) vertLines = log2(vertLines) horLines = 2 horLines = log2(horLines)
all_rects = list()
add_rect = function(all_rects, xmin, xmax, ymin, ymax) {
all_rects[[length(all_rects) + 1]] = list(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax)
return(all_rects)
}
add_rowRects = function(all_rects, ymin, ymax) {
all_rects = add_rect(all_rects, xmin = XMIN, xmax = vertLines[1], ymin = ymin, ymax = ymax)
for (v in 1:(length(vertLines) - 1)) {
all_rects = add_rect(all_rects, xmin = vertLines[v], xmax = vertLines[v + 1], ymin = ymin, ymax = ymax)
}
all_rects = add_rect(all_rects, xmin = vertLines[length(vertLines)], xmax = XMAX, ymin = ymin, ymax = ymax)
return(all_rects)
}
all_rects = add_rowRects(all_rects, horLines[1], YMAX)
all_rects = add_rowRects(all_rects, YMIN, horLines[1])
return(all_rects)
}
rects.get()
rects.draw(rects.get())
plot(c(-11,11), c(-1,8))
rects.draw(rects.get())
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source('C:/Users/jrboyd/Desktop/Shiny Apps/APP_gsea/scripts/functions_gsea_plots.R', echo=TRUE)
shiny::runApp()
rects.countIn(x = get_x(markData_4me3_4ac, start, end))
rects.countIn(x = get_x(markData_4me3_4ac, start, end),
y = get_y(markData_4me3_4ac, start, end),
rect)
shiny::runApp()
shiny::runApp()
shiny::runApp()
end
start
get_x(markData_4me3_4ac, end, start)
get_y(markData_4me3_4ac, end, start)
keep = rects.countIn(x = get_x(markData_4me3_4ac, end, start),
y = get_y(markData_4me3_4ac, end, start),
rect)
rect
rect = rects.get()[sigRects()[r_name]]
rects.get()
rect = rects.get()[[1]]
rect
rect = rects.get()[[sigRects()[r_name]]]
rect = rects.get()[[1]]
keep = rects.countIn(x = get_x(markData_4me3_4ac, end, start),
y = get_y(markData_4me3_4ac, end, start),
rect)
sum(keep)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?renderText
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
gl_types = c('Symbols', 'ENSG', 'ENSG.#', 'DAVID')
shiny::runApp()
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
shiny::runApp()
getwd()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
plot(markData_4me3_4ac[,1:2])
sel = 1:10
points(markData_4me3_4ac[sel,1:2], col = 'red')
text(markData_4me3_4ac[sel,1:2], rownames(markData_4me3_4ac)[sel], col = 'green')
text(markData_4me3_4ac[sel,1:2], ensg2sym(rownames(markData_4me3_4ac)[sel]), col = 'green')
text(markData_4me3_4ac[sel,1:2], ensg2sym[rownames(markData_4me3_4ac)[sel]], col = 'green')
plot(markData_4me3_4ac[,1:2])
points(markData_4me3_4ac[sel,1:2], col = 'red')
text(markData_4me3_4ac[sel,1:2], ensg2sym[rownames(markData_4me3_4ac)[sel]], col = 'green')
x = get_x(markData_4me3_4ac[ensg,], end, start)
shiny::runApp('APP_gsea')
rownames(membership)
rownames(membership)[keep]
nrow(markData_4me3_4ac)
nrow(membership)
intersect(rownames(markData_4me3_4ac), rownames(membership))
length(intersect(rownames(markData_4me3_4ac), rownames(membership)))
shiny::runApp('APP_gsea')
shiny::runApp('APP_gsea')
for(i in 1:length(x)){
x = xs[i]
y = ys[i]
rect(x - .1, y - .1, x +.1, y + .1, col = 'white', border = NA)
}
text(xs, ys, ensg2sym[ensg], col = 'green')
xs = get_x(markData_4me3_4ac[ensg,], end, start)
ys = get_y(markData_4me3_4ac[ensg,], end, start)
shiny::runApp('APP_gsea')
shiny::runApp('APP_gsea')
shiny::runApp('APP_gsea')
shiny::runApp('APP_gsea')
shiny::runApp('APP_gsea')
shiny::runApp('APP_gsea')
shiny::runApp('APP_gsea')
shiny::runApp('APP_gsea')
shiny::runApp('APP_gsea')
shiny::runApp('APP_gsea')
shiny::runApp('APP_gsea')
dim(data)
shiny::runApp('APP_gsea')
shiny::runApp('APP_gsea')
deployApp()
library(shinyapps)
deployApp()
setwd('APP_gsea/')
deployApp()
deployApp()
shiny::runApp()
deployApp()
shiny::runApp()
shiny::runApp()
deployApp()
setwd('..')
setwd('APP_venns/')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
a = character()
b = bbb
b = 'bbb'
paste(a, b)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
radioButtons(inputId = 'radio1', label = toPlot[1], choices = c('pos', 'neg', 'neutral'))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
tmp = radioButtons(inputId = 'KEY_ID', label = 'KEY_LABEL', choices = c('pos', 'neg', 'neutral'),inline = T),
shiny::runApp()
shiny::runApp()
membership
keep = ensg2cut[rownames(membership)] == 'ENSG00000026025'
sum(keep)
membership[keep,,drop = F]
tmp = membership[keep,,drop = F]
tmp
tmp[tmp]
names(tmp)[tmp]
colnames(tmp)[tmp]
